import type { App } from 'vue';
import type { CSSProperties } from 'vue';
import { Ref } from 'vue';

export declare const DEFAULT_OPTIONS: GlobalLoaderOptions;

export declare const globalLoader: {
    install(app: App, options?: Partial<GlobalLoaderOptions>): void;
};

export declare interface GlobalLoaderCSSVars extends CSSProperties {
    '--v-gl-fg-color': string;
    '--v-gl-bg-color': string;
    '--v-gl-bg-opacity': number;
    '--v-gl-bg-blur': string;
    '--v-gl-t-dur': string;
    '--v-gl-z': number;
}

export declare interface GlobalLoaderOptions {
    screenReaderMessage: string;
    transitionDuration: number;
    foregroundColor: string;
    backgroundColor: string;
    backgroundOpacity: number;
    backgroundBlur: number;
    zIndex: number;
}

export declare class GlobalLoaderStore {
    options: GlobalLoaderOptions;
    prevOptions: GlobalLoaderOptions;
    isLoading: Ref<boolean>;
    onDestroyedCb: () => void;
    onDisplayedResolve: () => void;
    constructor(pluginConfig: Partial<GlobalLoaderOptions>);
    setOptions(newOptions: Partial<GlobalLoaderOptions>): void;
    setPrevOptions(_prevOptions: Partial<GlobalLoaderOptions>): void;
    setIsLoading(value: boolean): void;
    displayLoader(scopedOptions?: Partial<GlobalLoaderOptions>): Promise<void>;
    destroyLoader(extOnDestroyed?: () => void): void;
    onDestroyed(): void;
}

export declare function useGlobalLoader(scopedOptions?: Partial<GlobalLoaderOptions>): {
    /** Display the global loader with any scoped option set in `useGlobalLoader` parameter. */
    displayLoader: () => Promise<void>;
    /** Destroy any active loader and restore global loader options. */
    destroyLoader: (onDestroy?: () => void) => void;
    /** Update the global loader default options. */
    updateOptions: (options: Partial<GlobalLoaderOptions>) => void;
    /** @internal This method is used internally by the plugin and should not be used by the user. */
    __onDestroyed: () => void;
    /** @internal This method is used internally by the plugin and should not be used by the user. */
    __onDisplayed: () => void;
    /** Reactive read-only global loader options. */
    options: {
        readonly screenReaderMessage: string;
        readonly transitionDuration: number;
        readonly foregroundColor: string;
        readonly backgroundColor: string;
        readonly backgroundOpacity: number;
        readonly backgroundBlur: number;
        readonly zIndex: number;
    };
    /** Reactive read-only global loader current state. */
    isLoading: Readonly<Ref<boolean>>;
};

export { }
